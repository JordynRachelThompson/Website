@model IEnumerable<MyWebsite.Models.BudgetProject.Budget>
@using Microsoft.AspNetCore.Identity
@using System.Linq
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<style>
    body {
        background-color: #212121 !important;
    }
</style>


@{ string user = User.Identity.Name;
    var limit = Convert.ToInt32(TempData["totalLimit"]);
    var spent = Convert.ToInt32(TempData["totalSpent"]);
    int difference = limit - spent;
    int budgetMonth = DateTime.Now.Month;
    var emptyBudget = Convert.ToBoolean(TempData["isBudgetEmpty"]);
    string hasPastBudget = Convert.ToString(TempData["hasPastBudget"]);
    TempData.Keep("hasPastBudget");
}

<div style="text-align:center; margin-top:180px;"><p style="text-align:center;">@Html.Partial("_LoginPartial")</p></div>
<h3 style="text-align:center; color:black; margin-top:100px;">Budget App</h3>
<div style="border-bottom: 1px dotted #cfd8dc;"></div>

@if (!SignInManager.IsSignedIn(User))
{
    <p style="text-align:center; font-size:20px; margin-top:30px;">Please log in or register first to use the app.</p>
}
else
{
    @if (emptyBudget)
    {
        if (hasPastBudget == "True")
        {
            <div style="border-bottom: 1px dotted #b2dfdb;"></div>
            <h3 style="text-align:center; color:black; font-weight:bold; margin-bottom:15px;">@DateTime.Now.ToString("MMMM")</h3>
            <div style="margin-top:35px;">
                <div class="row">
                    <div class="col l12 m12 s12" align="center">
                        @*Wants to use past budget limit*@
                        <form method="post" action="@Url.Action("Index", "Budgets", new { usePastBudgetLimit = hasPastBudget })">
                            @*Use last month's set budget limits*@
                            <button class="waves-effect waves-light btn-large black sharpCorners" style="font-weight:bold; font-size:20px; margin-top:10px;" type="submit" name="Save">
                                <i class="material-icons left">local_atm</i>Use Last Month's Budget Limits
                            </button>
                            @Html.Hidden("Email", user)
                            @Html.Hidden("Month", DateTime.Now.Month)
                        </form>
                        <button id="unhide-set-budget-form" class="waves-effect waves-light btn-large black sharpCorners" style="font-weight:bold; font-size:20px; margin-top:10px;">
                            <i class="material-icons left">local_atm</i>Set New Budget Limits
                        </button>
                        <a href='@Url.Action("PastBudgets", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">date_range</i>View Past Budgets</a>
                        <a href='@Url.Action("AddTransaction", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">trending_up</i>Budget Analytics</a>
                        <a href='@Url.Action("AddTransaction", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">insert_chart</i>Transfer to Excel</a>
                    </div>
                </div>
            </div>

            //Set Budget Form
            <div id="hidden-set-budget-form" style="display:none;">
                @*Set Budget Limit - Has had past budgets but wants to choose new limits*@
                @{
                    bool pastBudgetLimits = false;
                }
                <form method="post" action="@Url.Action("Index", "Budgets", new { usePastBudgetLimit = pastBudgetLimits })">
                    <div style="margin-top:35px; text-align:center;">
                        <button class="aves-effect waves-light btn-large sharpCorners black-text" style="background-color:#b2dfdb; font-weight:bold; font-size:20px;" type="submit" name="Save">
                            <i class="material-icons left">local_atm</i>Save Budget Limits
                        </button>
                    </div>
                    <div class="row" style="margin-top:20px; margin-left:200px; margin-right:200px;">
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Groceries/Food</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="GroceryLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Housing/Rent</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="HousingLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Entertainment</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="EntLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                    </div>
                    <div class="row" style="margin-top:80px; margin-left:200px; margin-right:200px;">
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Bills</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="BillsLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Car/Gas</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="GasLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                        <div class="col s12 m6 l4">
                            <h5 style="margin-top:77px; font-weight:bold;">Miscellaneous Expenses</h5>
                            <div class="input-field">
                                <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                                <input name="MiscLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                            </div>
                        </div>
                    </div>
                    @Html.Hidden("Email", user)
                    @Html.Hidden("GroceryLimit", "GroceryLimit")
                    @Html.Hidden("HousingLimit", "HousingLimit")
                    @Html.Hidden("EntLimit", "EntLimit")
                    @Html.Hidden("BillsLimit", "BillsLimit")
                    @Html.Hidden("GasLimit", "GasLimit")
                    @Html.Hidden("MiscLimit", "MiscLimit")
                    @Html.Hidden("Month", DateTime.Now.Month)
                </form>
                @*End of Set Budget Limit*@
            </div>
        }


        //Has never had budget
        else
        {
            <div style="border-bottom: 1px dotted #b2dfdb;"></div>
            @*Set Budget Limit - Has never had budget*@
            bool pastBudgetLimits = false;
            <form method="post" action="@Url.Action("Index", "Budgets", new { usePastBudgetLimit = pastBudgetLimits })">
                <div style="margin-top:35px; text-align:center;">
                    <button class="aves-effect waves-light btn-large black-text sharpCorners" style="background-color:#b2dfdb; font-weight:bold; font-size:20px;" type="submit" name="Save">
                        <i class="material-icons left">local_atm</i>Set Budget Limits
                    </button>
                </div>
                <div class="row" style="margin-top:20px; margin-left:200px; margin-right:200px;">
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Groceries/Food</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="GroceryLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Housing/Rent</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="HousingLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Entertainment</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="EntLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                </div>
                <div class="row" style="margin-top:80px; margin-left:200px; margin-right:200px;">
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Bills</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="BillsLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Car/Gas</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="GasLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                    <div class="col s12 m6 l4">
                        <h5 style="margin-top:77px; font-weight:bold;">Miscellaneous Expenses</h5>
                        <div class="input-field">
                            <i class="material-icons prefix" style="margin-top:30px; color:#b2dfdb;">attach_money</i>
                            <input name="MiscLimit" placeholder="0" id="budget-limit-amount" style="margin-top: 25px;" type="number" class="validate">
                        </div>
                    </div>
                </div>
                @Html.Hidden("Email", user)
                @Html.Hidden("GroceryLimit", "GroceryLimit")
                @Html.Hidden("HousingLimit", "HousingLimit")
                @Html.Hidden("EntLimit", "EntLimit")
                @Html.Hidden("BillsLimit", "BillsLimit")
                @Html.Hidden("GasLimit", "GasLimit")
                @Html.Hidden("MiscLimit", "MiscLimit")
                @Html.Hidden("Month", DateTime.Now.Month)
            </form>

            //End of Set Budget Limit
        }

    }

    else
    {
        <div style="margin-top:55px; margin-bottom: 55px; text-align:center;">
            <h5 style="text-align:center; color:#b2dfdb; margin-top:10px;">@TempData["successLimitsUpdated"]</h5>
            <h3 style="text-align:center; color:black; font-weight:bold; margin-bottom:15px;">@DateTime.Now.ToString("MMMM")</h3>
            <a href='@Url.Action("AddTransaction", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">add_box</i>Add Transaction</a>
            @foreach (var item in Model)
            {
                <a asp-action="Edit" asp-route-id="@item.Id" class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">edit</i>Edit Budget Limit</a>
            }
            <a href='@Url.Action("PastBudgets", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">date_range</i>View Past Budgets</a>
            <a href='@Url.Action("AddTransaction", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">trending_up</i>Budget Analytics</a>
            <a href='@Url.Action("AddTransaction", "Budgets")' class="waves-effect waves-light btn-large sharpCorners black" style="font-weight:bold; font-size:20px; margin-top:10px;"><i class="material-icons left">insert_chart</i>Transfer to Excel</a>
        </div>

        @foreach (var item in Model.Where(x => x.Month == budgetMonth))
        {
            <div class="container">
                <div class="row">
                    <div class="col s12 m12 l6">
                        @{double remainingG = item.GroceryLimit - Convert.ToInt32(TempData["groceryTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingG <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingG.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingG.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.GroceryLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartGrocery" class="center-div" style="width: 500px; height: 300px; margin-top:-10px;"></div>
                        @if (remainingG < 0)
                        {
                            remainingG = 0;
                        }
                        <h2 id="totalBudgetG" style="display:none">@remainingG</h2>
                        <h2 id="totalSpentG" style="display:none">@Convert.ToDouble(TempData["groceryTotal"])</h2>
                    </div>

                    <div class="col s12 m12 l6">
                        @{double remainingH = item.HousingLimit - Convert.ToInt32(TempData["housingTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingH <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingH.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingH.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.HousingLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartHousing" class="center-div" style="width: 500px; height: 300px; margin-top:-10px;"></div>
                        @if (remainingH < 0)
                        {
                            remainingH = 0;
                        }
                        <h2 id="totalBudgetH" style="display:none">@remainingH</h2>
                        <h2 id="totalSpentH" style="display:none">@Convert.ToDouble(TempData["housingTotal"])</h2>
                    </div>
                </div>

                <div class="row">
                    <div class="col s12 m12 l6">
                        @{double remainingE = item.EntLimit - Convert.ToInt32(TempData["entTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingE <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingE.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingE.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.EntLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartEntertainment" class="center-div" style="width: 500px; height: 300px; margin-top:10px;"></div>
                        @if (remainingE < 0)
                        {
                            remainingE = 0;
                        }
                        <h2 id="totalBudgetE" style="display:none">@remainingE</h2>
                        <h2 id="totalSpentE" style="display:none">@Convert.ToDouble(TempData["entTotal"])</h2>
                    </div>

                    <div class="col s12 m12 l6">
                        @{double remainingB = item.BillsLimit - Convert.ToInt32(TempData["billsTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingB <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingB.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingB.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.BillsLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartBills" class="center-div" style="width: 500px; height: 300px; margin-top:10px;"></div>
                        @if (remainingB < 0)
                        {
                            remainingB = 0;
                        }
                        <h2 id="totalBudgetB" style="display:none">@remainingB</h2>
                        <h2 id="totalSpentB" style="display:none">@Convert.ToDouble(TempData["billsTotal"])</h2>
                    </div>
                </div>

                <div class="row">
                    <div class="col s12 m12 l6">
                        @{double remainingGas = item.GasLimit - Convert.ToInt32(TempData["gasTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingGas <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingH.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingGas.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.GasLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartGas" class="center-div" style="width: 500px; height: 300px; margin-top:10px;"></div>
                        @if (remainingGas < 0)
                        {
                            remainingGas = 0;
                        }
                        <h2 id="totalBudgetGas" style="display:none">@remainingGas</h2>
                        <h2 id="totalSpentGas" style="display:none">@Convert.ToDouble(TempData["gasTotal"])</h2>
                    </div>

                    <div class="col s12 m12 l6">
                        @{double remainingM = item.MiscLimit - Convert.ToDouble(TempData["miscTotal"]);}
                        @*More than the total has been spent*@
                        @if (remainingM <= 0)
                        {
                            <h5 style="margin-left:150px;"><span style="color:#e6c5c4">$@remainingM.ToString("#,##0.00")</span></h5>
                        }

                        @*Still some of the budget left*@
                        else
                        {
                            <h5 style="margin-left:150px;"><span style="color:#b2dfdb">$@remainingM.ToString("#,##0.00")</span></h5>
                        }
                        <a class="btn tooltipped black" style="margin-bottom:12px; margin-left:150px;" data-position="right" data-tooltip="$@item.MiscLimit.ToString("#,##0.00")">Budget Limit</a>
                        <div id="donutchartMisc" class="center-div" style="width: 500px; height: 300px; margin-top:-10px;"></div>
                        @if (remainingM < 0)
                        {
                            remainingM = 0;
                        }
                        <h2 id="totalBudgetM" style="display:none">@remainingM</h2>
                        <h2 id="totalSpentM" style="display:none">@Convert.ToInt32(TempData["miscTotal"])</h2>
                    </div>
                </div>
            </div>
        }

        @*<div class="center-div" id="donutchartTotal" style="width: 900px; height: 500px;"></div>*@
    }
}

<h2 id="totalSpent" style="display:none">@spent</h2>
<h2 id="totalBudget" style="display:none">@limit</h2>



<style>
    #Total Spent {
        color: #cfd8dc !important;
    }

    #Total Remaining Budget {
        color: #cfd8dc !important;
    }
</style>


<script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>

<script type="text/javascript">


    $(document).ready(function () {
        $('.tooltipped').tooltip();
        donutChartGrocery()
        donutChartHousing()
        donutChartEntertainment()
        donutChartBills()
        donutChartGas()
        donutChartMisc()
        //donutChartTotal();
    });

    $('#unhide-set-budget-form').on('click', function () {
        $('#hidden-set-budget-form').toggle();
    });

    function donutChartGrocery() {
        var totalSpentG = parseInt(document.getElementById('totalSpentG').innerHTML);
        var totalBudgetG = parseInt(document.getElementById('totalBudgetG').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentG], ['Remaining', totalBudgetG]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Groceries/Food',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#cfd8dc',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartGrocery'));
            chart.draw(data, options);
        }
    }

    function donutChartHousing() {
        var totalSpentH = parseInt(document.getElementById('totalSpentH').innerHTML);
        var totalBudgetH = parseInt(document.getElementById('totalBudgetH').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentH], ['Remaining', totalBudgetH]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Housing/Rent',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#ffffff',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartHousing'));
            chart.draw(data, options);
        }
    }

    function donutChartEntertainment() {
        var totalSpentE = parseInt(document.getElementById('totalSpentE').innerHTML);
        var totalBudgetE = parseInt(document.getElementById('totalBudgetE').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentE], ['Remaining', totalBudgetE]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Entertainment',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#cfd8dc',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartEntertainment'));
            chart.draw(data, options);
        }
    }

    function donutChartBills() {
        var totalSpentB = parseInt(document.getElementById('totalSpentB').innerHTML);
        var totalBudgetB = parseInt(document.getElementById('totalBudgetB').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentB], ['Remaining', totalBudgetB]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Bills',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#cfd8dc',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartBills'));
            chart.draw(data, options);
        }
    }

    function donutChartGas() {
        var totalSpentGas = parseInt(document.getElementById('totalSpentGas').innerHTML);
        var totalBudgetGas = parseInt(document.getElementById('totalBudgetGas').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentGas], ['Remaining', totalBudgetGas]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Gas/Car',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#cfd8dc',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartGas'));
            chart.draw(data, options);
        }
    }

    function donutChartMisc() {
        var totalSpentM = parseInt(document.getElementById('totalSpentM').innerHTML);
        var totalBudgetM = parseInt(document.getElementById('totalBudgetM').innerHTML);

        var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpentM], ['Remaining', totalBudgetM]];

        google.charts.load("current", { packages: ["corechart"] });
        google.charts.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = google.visualization.arrayToDataTable(budgetData);
            var options = {
                titleTextStyle: {
                    color: '#cfd8dc',
                    fontSize: 28,
                    bold: true,
                    fontName: 'arial',
                }
                , title: 'Miscellaneous',
                colors: ['#e6c5c4', '#6cb7b1'],
                pieHole: 0.5,
                backgroundColor: '#212121',
                color: '#cfd8dc',
                is3D: true,
            };
            var chart = new google.visualization.PieChart(document.getElementById('donutchartMisc'));
            chart.draw(data, options);
        }
    }

                                    //function donutChartTotal() {
                                    //    var totalSpent = parseInt(document.getElementById('totalSpent').innerHTML);
                                    //    var totalBudget = parseInt(document.getElementById('totalBudget').innerHTML);

                                    //    var budgetData = [['Spent', 'Remaining'], ['Spent', totalSpent], ['Remaining', totalBudget]];

                                    //    google.charts.load("current", { packages: ["corechart"] });
                                    //    google.charts.setOnLoadCallback(drawChart);
                                    //    function drawChart() {
                                    //        var data = google.visualization.arrayToDataTable(budgetData);
                                    //        var options = {
                                    //            titleTextStyle: {
                                    //                color: '#cfd8dc',
                                    //                fontSize: 28,
                                    //                bold: true,
                                    //                fontName: 'arial',
                                    //            }
                                    //            , title: 'Total Budget',
                                    //            colors: ['#e6c5c4', '#6cb7b1'],
                                    //            pieHole: 0.5,
                                    //            backgroundColor: '#212121',
                                    //            color: '#cfd8dc',
                                    //            is3D: true,
                                    //        };
                                    //        var chart = new google.visualization.PieChart(document.getElementById('donutchartTotal'));
                                    //        chart.draw(data, options);
                                    //    }
                                    //};
</script>

